#include <stdio.h>
#include "CordioBLE.h"
#include "CordioHCIDriver.h"
#include "CordioHCITransportDriver.h"
#include "mbed.h"
#include "hci_api.h"
#include "hci_cmd.h"
#include "hci_core.h"
#include "dm_api.h"
#include "bstream.h"
//
#include "DTM_boot.h"
#include "DTM_cmd_db.h"
#include "osal.h"
#include "bluenrg1_api.h"
#include "bluenrg1_stack.h"
#include "hci_defs.h"
//#include "transport_layer.h"

extern "C" void rcv_callback(uint8_t *data, uint16_t len){ble::vendor::cordio::CordioHCITransportDriver::on_data_received(data, len);}

#define HCI_RESET_RAND_CNT        4

#define ACI_READ_CONFIG_DATA_OPCODE 0xFC0D
#define ACI_WRITE_CONFIG_DATA_OPCODE 0xFC0C

#define RANDOM_STATIC_ADDRESS_OFFSET 0x80
#define LL_WITHOUT_HOST_OFFSET 0x2C

uint8_t Value_LL = 0x01;

//////da eliminare
uint16_t ACL_Data_Packet_Length;
uint8_t LE_ACL_Data_Packets;
//////da eliminare

namespace ble {
namespace vendor {
namespace bluenrg {

/**
 * BlueNRG HCI driver implementation.
 * @see cordio::CordioHCIDriver
 */
class HCIDriver : public cordio::CordioHCIDriver
{
public:
    /**
     * Construction of the BlueNRG HCIDriver.
     * @param transport: Transport of the HCI commands.
     * @param rst: Name of the reset pin
     */
    HCIDriver(cordio::CordioHCITransportDriver& transport_driver) :
        cordio::CordioHCIDriver(transport_driver) { }

    /**
     * @see CordioHCIDriver::do_initialize
     */
    virtual void do_initialize() {

    }

    /**
     * @see CordioHCIDriver::start_reset_sequence
     */
    virtual void start_reset_sequence() {
        /* send an HCI Reset command to start the sequence */
        HciResetCmd();
    }

    /**
     * @see CordioHCIDriver::do_terminate
     */
    virtual void do_terminate() {

    }

    /**
     * @see CordioHCIDriver::handle_reset_sequence
     */

    virtual void handle_reset_sequence(uint8_t *pMsg) {
        // only accept command complete event:
        if (*pMsg != HCI_CMD_CMPL_EVT) {
            return;
        }

        uint16_t       opcode;
        static uint8_t randCnt;

        /* parse parameters */
        pMsg += HCI_EVT_HDR_LEN;
        pMsg++;                   /* skip num packets */
        BSTREAM_TO_UINT16(opcode, pMsg); // copy opcode
        pMsg++;                   /* skip status */

        /* decode opcode */
        switch (opcode)
        {
            case HCI_OPCODE_RESET:
                /* initialize rand command count */
                randCnt = 0;
                // Set the event mask to control which events are generated by the controller for the host.
                //HciSetEventMaskCmd((uint8_t *) hciEventMask);

                //Set the controller in Link Layer Only mode
                aci_hal_write_config_data(LL_WITHOUT_HOST_OFFSET, 1, &Value_LL);

                // Ask the Bluetooth address of the controller.
                HciReadBdAddrCmd();
                break;
/*
            case HCI_OPCODE_SET_EVENT_MASK:
                // Set the event mask to control which LE events are generated by the controller for the host.
                HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
                break;

            case HCI_OPCODE_LE_SET_EVENT_MASK:
                // Set the event mask to control which events are generated by the controller for the host (2nd page of flags).
                HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
                break;

            case HCI_OPCODE_SET_EVENT_MASK_PAGE2:
                // Ask the Bluetooth address of the controller.
                HciReadBdAddrCmd();
                break;
*/
            case HCI_OPCODE_READ_BD_ADDR:
                // Store the Bluetooth address in the stack runtime parameter.
                BdaCpy(hciCoreCb.bdAddr, pMsg);

                // Read the size of the buffer of the controller.
                HciLeReadBufSizeCmd();
                break;

            case HCI_OPCODE_LE_READ_BUF_SIZE:
                // Store the buffer parameters in the stack runtime parameters.
            	/////////da eliminare
            	hci_le_read_buffer_size(&ACL_Data_Packet_Length, &LE_ACL_Data_Packets);
            	/////////da eliminare
                BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
                BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);

                /* initialize ACL buffer accounting */
                hciCoreCb.availBufs = hciCoreCb.numBufs;

                // Read the states and state combinations supported by the link layer of the controller.
                HciLeReadSupStatesCmd();
                break;

            case HCI_OPCODE_LE_READ_SUP_STATES:
                // Store supported state and combination in the runtime parameters of the stack.
                memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);

                // Read the total of whitelist entries that can be stored in the controller.
                HciLeReadWhiteListSizeCmd();
                break;

            case HCI_OPCODE_LE_READ_WHITE_LIST_SIZE:
                // Store the number of whitelist entries in the stack runtime parameters.
                BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);

                // Read the LE features supported by the controller.
                HciLeReadLocalSupFeatCmd();
                break;

            case HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT:
                // Store the set of LE features supported by the controller.
                BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);

                // Read the total number of address translation entries which can be stored in the controller resolving list.
                hciCoreReadResolvingListSize();
                break;

            case HCI_OPCODE_LE_READ_RES_LIST_SIZE:
                // Store the number of address translation entries in the stack runtime parameter.
                BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);

                // Read the Controllerâ€™s maximum supported payload octets and packet duration times for transmission and reception.
                hciCoreReadMaxDataLen();
                break;

            case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
                {
                    // Store payload definition in the runtime stack parameters.
                    uint16_t maxTxOctets;
                    uint16_t maxTxTime;

                    BSTREAM_TO_UINT16(maxTxOctets, pMsg);
                    BSTREAM_TO_UINT16(maxTxTime, pMsg);

                    /* use Controller's maximum supported payload octets and packet duration times
                    * for transmission as Host's suggested values for maximum transmission number
                    * of payload octets and maximum packet transmission time for new connections.
                    */
                    HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
                }
                break;

            case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
                if (hciCoreCb.extResetSeq)
                {
                    /* send first extended command */
                    (*hciCoreCb.extResetSeq)(pMsg, opcode);
                }
                else
                {
                    /* initialize extended parameters */
                    hciCoreCb.maxAdvDataLen = 0;
                    hciCoreCb.numSupAdvSets = 0;
                    hciCoreCb.perAdvListSize = 0;

                    /* send next command in sequence */
                    HciLeRandCmd();
                }
                break;

            case HCI_OPCODE_LE_READ_MAX_ADV_DATA_LEN:
            case HCI_OPCODE_LE_READ_NUM_SUP_ADV_SETS:
            case HCI_OPCODE_LE_READ_PER_ADV_LIST_SIZE:
                // handle extended command
                if (hciCoreCb.extResetSeq)
                {
                    /* send next extended command in sequence */
                    (*hciCoreCb.extResetSeq)(pMsg, opcode);
                }
                break;

            case HCI_OPCODE_LE_RAND:
                /* check if need to send second rand command */
                if (randCnt < (HCI_RESET_RAND_CNT-1))
                {
                    randCnt++;
                    HciLeRandCmd();
                }
                else
                {
                    /* last command in sequence; set resetting state and call callback */
                    signal_reset_sequence_done();
                }
                break;

            default:
                break;
        }
    }

private:
    static void hciCoreReadMaxDataLen(void)
    {
        /* if LE Data Packet Length Extensions is supported by Controller and included */
        if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
            (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
        {
            /* send next command in sequence */
            HciLeReadMaxDataLen();
        }
        else
        {
            /* send next command in sequence */
            HciLeRandCmd();
        }
    }

    static void hciCoreReadResolvingListSize(void)
    {
        /* if LL Privacy is supported by Controller and included */
        if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
            (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
        {
            /* send next command in sequence */
            HciLeReadResolvingListSize();
        }
        else
        {
            hciCoreCb.resListSize = 0;

            /* send next command in sequence */
            hciCoreReadMaxDataLen();
        }
    }

/********antonio vecchia versione ********/

//    virtual void handle_reset_sequence(uint8_t *pMsg) {
//        uint16_t       opcode;
//        static uint8_t randCnt;
//        //wait_ms(5);
//
//        /* if event is a command complete event */
//        if (*pMsg != HCI_CMD_CMPL_EVT)
//        	return;
//
//        /* parse parameters */
//        pMsg += HCI_EVT_HDR_LEN;
//        pMsg++;                   /* skip num packets */
//        BSTREAM_TO_UINT16(opcode, pMsg);
//        pMsg++;                   /* skip status */
//
//        /* decode opcode */
//        switch (opcode)
//        {
//        case HCI_OPCODE_RESET: {
//        	/* initialize rand command count */
//        	randCnt = 0;
//        	// important, the bluenrg_initialized event come after the
//        	// hci reset event (not documented), but in this initialization
//        	// procedure it is bypassed
//
//        	/*enable link layer only */
//        	uint8_t Value = 1;
//        	aci_hal_write_config_data(LL_WITHOUT_HOST_OFFSET, 1, &Value);
//        	//aci_gatt_init();
//        	aciReadConfigParameter(RANDOM_STATIC_ADDRESS_OFFSET);
//        } break;
//
//        case ACI_READ_CONFIG_DATA_OPCODE:
//        	// note: will send the HCI command to send the random address
//        	cordio::BLE::deviceInstance().getGap().setAddress(
//        			BLEProtocol::AddressType::RANDOM_STATIC,
//					pMsg
//        	);
//        	break;
//
//        case HCI_OPCODE_LE_SET_RAND_ADDR:
//        	HciSetEventMaskCmd((uint8_t *) mask_events);
////        	HciSetEventMaskCmd((uint8_t *) hciEventMask_BNRG2);
//        	break;
//
//        case HCI_OPCODE_SET_EVENT_MASK:
//        	/* send next command in sequence */
//        	HciLeSetEventMaskCmd((uint8_t *) le_mask_events);
////        	HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask_BNRG2);
//        	break;
//
//        case HCI_OPCODE_LE_SET_EVENT_MASK:
//        	// Note: the public address is not read because there is no valid public address
//        	// provisioned by default on the target
//        	// Enable if the
//#if MBED_CONF_CORDIO_BLUENRG_VALID_PUBLIC_BD_ADDRESS == 1
//        	/* send next command in sequence */
//        	HciReadBdAddrCmd();
//        	break;
//
//        case HCI_OPCODE_READ_BD_ADDR:
//        	/* parse and store event parameters */
//        	BdaCpy(hciCoreCb.bdAddr, pMsg);
//
//        	/* send next command in sequence */
//#endif
//        	HciLeReadBufSizeCmd();
//        	break;
//
//        case HCI_OPCODE_LE_READ_BUF_SIZE:
//        	/* parse and store event parameters */
//        	BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
//        	BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
//
//        	/* initialize ACL buffer accounting */
//        	hciCoreCb.availBufs = hciCoreCb.numBufs;
//
//        	/* send next command in sequence */
//        	HciLeReadSupStatesCmd();
//        	break;
//
//        case HCI_OPCODE_LE_READ_SUP_STATES:
//        	/* parse and store event parameters */
//        	memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
//
//        	/* send next command in sequence */
//        	HciLeReadWhiteListSizeCmd();
//        	break;
//
//        case HCI_OPCODE_LE_READ_WHITE_LIST_SIZE:
//        	/* parse and store event parameters */
//        	BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
//
//        	/* send next command in sequence */
//        	HciLeReadLocalSupFeatCmd();
//        	break;
//
//        case HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT:
//        	/* parse and store event parameters */
//        	BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
//
//        	/* send next command in sequence */
//        	hciCoreReadResolvingListSize();
//        	break;
//
//        case HCI_OPCODE_LE_READ_RES_LIST_SIZE:
//        	/* parse and store event parameters */
//        	BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
//
//        	/* send next command in sequence */
//        	hciCoreReadMaxDataLen();
//        	break;
//
//        case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
//        {
//        	uint16_t maxTxOctets;
//        	uint16_t maxTxTime;
//
//        	BSTREAM_TO_UINT16(maxTxOctets, pMsg);
//        	BSTREAM_TO_UINT16(maxTxTime, pMsg);
//
//        	/* use Controller's maximum supported payload octets and packet duration times
//        	 * for transmission as Host's suggested values for maximum transmission number
//        	 * of payload octets and maximum packet transmission time for new connections.
//        	 */
//        	HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
//        }
//        break;
//
//        case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
//        	if (hciCoreCb.extResetSeq)
//        	{
//        		/* send first extended command */
//        		(*hciCoreCb.extResetSeq)(pMsg, opcode);
//        	}
//        	else
//        	{
//        		/* initialize extended parameters */
//        		hciCoreCb.maxAdvDataLen = 0;
//        		hciCoreCb.numSupAdvSets = 0;
//        		hciCoreCb.perAdvListSize = 0;
//
//        		/* send next command in sequence */
//        		HciLeRandCmd();
//        	}
//        	break;
//
//        case HCI_OPCODE_LE_READ_MAX_ADV_DATA_LEN:
//        case HCI_OPCODE_LE_READ_NUM_SUP_ADV_SETS:
//        case HCI_OPCODE_LE_READ_PER_ADV_LIST_SIZE:
//        	if (hciCoreCb.extResetSeq)
//        	{
//        		/* send next extended command in sequence */
//        		(*hciCoreCb.extResetSeq)(pMsg, opcode);
//        	}
//        	break;
//
//        case HCI_OPCODE_LE_RAND:
//        	/* check if need to send second rand command */
//        	if (randCnt < (HCI_RESET_RAND_CNT-1))
//        	{
//        		randCnt++;
//        		HciLeRandCmd();
//        	}
//        	else
//        	{
//        		signal_reset_sequence_done();
//        	}
//        	break;
//
//        default:
//        	break;
//        }
//    }

//private:
//    void aciReadConfigParameter(uint8_t offset) {
//        uint8_t *pBuf = hciCmdAlloc(ACI_READ_CONFIG_DATA_OPCODE, 1);
//        if (!pBuf) {
//            return;
//        }
//
//        pBuf[3] = offset;
//        hciCmdSend(pBuf);
//    }
//
//    void hciCoreReadResolvingListSize(void)
//    {
//        /* if LL Privacy is supported by Controller and included */
//        if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
//            (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
//        {
//            /* send next command in sequence */
//            HciLeReadResolvingListSize();
//        }
//        else
//        {
//            hciCoreCb.resListSize = 0;
//
//            /* send next command in sequence */
//            hciCoreReadMaxDataLen();
//        }
//    }
//
//    void hciCoreReadMaxDataLen(void)
//    {
//    /* if LE Data Packet Length Extensions is supported by Controller and included */
//        if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
//            (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
//        {
//            /* send next command in sequence */
//            HciLeReadMaxDataLen();
//        }
//        else
//        {
//            /* send next command in sequence */
//            HciLeRandCmd();
//        }
//    }
};

/**
 * Transport driver of the ST BlueNRG shield.
 * @important: With that driver, it is assumed that the SPI bus used is not shared
 * with other SPI peripherals. The reasons behind this choice are simplicity and
 * performance:
 *   - Reading from the peripheral SPI can be challenging especially if other
 *     threads access the same SPI bus. Indeed it is common that the function
 *     spiRead yield nothings even if the chip has signaled data with the irq
 *     line. Sharing would make the situation worse and increase the risk of
 *     timeout of HCI commands / response.
 *   - This driver can be used even if the RTOS is disabled or not present it may
 *     may be usefull for some targets.
 *
 * If The SPI is shared with other peripherals then the best option would be to
 * handle SPI read in a real time thread woken up by an event flag.
 *
 * Other mechanisms might also be added in the future to handle data read as an
 * event from the stack. This might not be the best solution for all BLE chip;
 * especially this one.
 */
class TransportDriver : public cordio::CordioHCITransportDriver {
public:
    /**
     * Construct the transport driver required by a BlueNRG module.
     * @param mosi Pin of the SPI mosi
     * @param miso Pin of the SPI miso
     * @param sclk Pin of the SPI clock
     * @param irq Pin used by the module to signal data are available.
     */
    TransportDriver() {
    }

    virtual ~TransportDriver(){}

    /**
     * @see CordioHCITransportDriver::initialize
     */
    virtual void initialize() {
    	/* System Init */
    	//DTM_SystemInit();

    	/* Stack Initialization */
    	DTM_StackInit();
    }

    /**
     * @see CordioHCITransportDriver::terminate
     */
    virtual void terminate() { }

    /**
     * @see CordioHCITransportDriver::write
     */
    virtual uint16_t write(uint8_t type, uint16_t len, uint8_t *pData) {
    	uint8_t resp_len;
    	uint8_t buffer[len];
    	for(int i=0; i<len; i++){
    		buffer[i] = pData[i];
    	}
    	if(type== HCI_CMD_TYPE){
//    		buffer[0]=pData[0];  //command OCF, big endian
//    		buffer[1]=pData[1];   //command OGF, big endian endian
//    		for(int i=0; i<len; i++){
//    			buffer[i] = pData[i];
//    		}
        	resp_len = process_command(pData, len, buffer_out, 255);
        	send_event(buffer_out, resp_len);
    	}
    	else if(type==HCI_ACL_TYPE){
    	      uint16_t connHandle;
    	      uint16_t dataLen;
    	      uint8_t* pduData;
    	      uint8_t  pb_flag;
    	      uint8_t  bc_flag;

    	      connHandle = ((pData[1] & 0x0F) << 8) + pData[0];
    	      dataLen = (pData[3] << 8) + pData[2];
    	      pduData = pData+4;
    	      pb_flag = (pData[1] >> 4) & 0x3;
    	      bc_flag = (pData[1] >> 6) & 0x3;
    	      hci_tx_acl_data(connHandle, pb_flag, bc_flag, dataLen, pduData);
    	}
    	//se è un HCI reset bisogna inviare il secondo evento aci blue initialized event
    	////////ma SE non c'è spazio nella coda, per cui uso l'hci reset command complete event
    	////////per notificare al cordio l'avvenuto reset
//    	if(buffer[0] == 0x03 && buffer[1] == 0x0c){
//    		uint8_t aci_blue_initialize_event[6] = {0x04, VENDOR_SPECIFIC_EVENT, 3, 0x01, 0x00, 0x01};
//        	on_data_received(aci_blue_initialize_event, aci_blue_initialize_event[2] + 3);
//    	}

    	return len;
    }

private:
    uint16_t process_command(uint8_t *buffer_in, uint16_t buffer_in_length, uint8_t *buffer_out, uint16_t buffer_out_max_length){
    	uint32_t i;
    	  uint16_t ret_val, opCode;

    	  Osal_MemCpy(&opCode, buffer_in, 2);
    	  for (i = 0; i < (sizeof(hci_command_table)/sizeof(hci_command_table_type)); i++) {
    	    if (opCode == hci_command_table[i].opcode) {
    	      ret_val = hci_command_table[i].execute(buffer_in+2, buffer_in_length-2, buffer_out, buffer_out_max_length);
//    	      if (opCode == 0x0c03) {
//    	        // For HCI_RESET, set flag to issue a sys reset
//    	        ///////////////////////////////////////////////////////reset_pending = 1;
//    	      }
    	      //add get crash handler
    	      return ret_val;
    	    }
    	  }
    	  // Unknown command length
    	  buffer_out[0] = 0x04;
    	  buffer_out[1] = 0x0F;
    	  buffer_out[2] = 0x04;
    	  buffer_out[3] = 0x01;
    	  buffer_out[4] = 0x01;
    	  Osal_MemCpy(&buffer_out[5], &opCode, 2);
    	  return 7;
    }

    void send_event(uint8_t *buffer_out, uint16_t buffer_out_length)
    {
    	on_data_received(buffer_out, buffer_out_length);
    }

    uint8_t buffer_out[258];
    /* Exported constants --------------------------------------------------------*/

    //uint32_t __blueflag_RAM;
    //uint8_t reset_pending; //TBR
};

} // namespace bluenrg
} // namespace vendor
} // namespace ble

/**
 * Cordio HCI driver factory
 */
ble::vendor::cordio::CordioHCIDriver& ble_cordio_get_hci_driver() {
    static ble::vendor::bluenrg::TransportDriver transport_driver;
    static ble::vendor::bluenrg::HCIDriver hci_driver(transport_driver);
    return hci_driver;
}
